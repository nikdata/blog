{
  "hash": "b4ffa5fe45f2366d72f853d1f547f264",
  "result": {
    "markdown": "---\ntitle: Magic 8 Ball Function\ndate: '2018-01-01'\ndescription: Learning to write a function in R\nimage: \"img/code.jpg\"\ncategories:\n  - R\n---\n\n\nIn my PREDICT 454 class, one of the R challenges that our professor wanted us to undertake involved creating a simple function that acted’ like the [Magic 8 Ball](https://en.wikipedia.org/wiki/Magic_8-Ball). So let’s get to it!\n\n## Requirements\n\n1. The function must output one of the following texts:\n\n- I dont see that happening.\n- You must be dreaming.\n- Chances are good.\n- If you work hard and stay focused, then this might happen.\n- When the sun shines, it shines on your face.\n- Definitely going to happen!\n- Take some time to think about it.\n- This is not a good idea!\n- This is a great idea!\n- Cannot be determined at this time. Try Again!\n\n2. Add an option feature in which the user can include the seed number.\n\n3. The function should be called **magic.8ball()** and if a seed is to be used, then the function should be run as **magic.8ball(<seed number>)**.\n\n## Approach\n\nLet's start with defining our messages into a vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# store the messages into a vector\nmessages <- c(\"I don't see that happening.\",\n              'You must be dreaming.',\n              'Chances are good.',\n              'If you work hard and stay focused, then this might happen.',\n              'When the sun shines, it shines on your face.',\n              'Definitely going to happen!',\n              'Take some time to think about it.',\n              'This is not a good idea!',\n              'This is a great idea!',\n              'Cannot be determined at this time.  Try Again!')\n```\n:::\n\n\nKeep in mind that in R, you can call a specific 'spot' within a vector. For instance, if we wanted the third^[Unlike Python, R is not 0 indexed. This means that initial spots or values start at position 1 not 0.] message (\"Chances are good.\"), we simply have to say `messages[3]`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessages[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Chances are good.\"\n```\n:::\n:::\n\n\nNow let's write a function. In R, you have to 'store' the function in a variable name. That variable name becomes the name of the function.\n\nIf we want arguments (i.e., values that can be supplied by the user for the function to be used), we simply add a name for the value within the `function()` argument. Here, we'll use the input value name (i.e., argument) of 'seed_value'.\n\nI've commmented the code to help explain what it's doing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmagic.8ball <- function(seed_value) {\n  # check to see if the argument is missing\n  # if argument is missing, the output will change every time the function is run\n  if(missing(seed_value)) {\n    x <- sample(1:10,1)\n  } else {\n    # if seed is provided, then the results are reproducible\n    set.seed(seed_value)\n    x <- sample(1:10,1)\n  }\n  \n  # store the message that has been 'selected'\n  out <- messages[x]\n  \n  # return the message to the console\n  return(out)\n}\n```\n:::\n\n\nNow let's call the function in 2 ways: without a seed and with a seed.\n\nWithout a seed:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmagic.8ball()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"This is not a good idea!\"\n```\n:::\n:::\n\n\nWith a seed:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmagic.8ball(seed_value = 123)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Chances are good.\"\n```\n:::\n:::\n\n\nIf no `seed_value` is provided, then a random message will be generated.\n\n## Some Takeaways\n\nI highly recommend having *some* defensive coding practices when using functions. For instance, the `missing()` function (built-in to base R) is helpful when the user does not specify a specific argument. We could even take this a step further and check to make sure that the user enters an integer value (for example).\n\nFunctions are powerful in almost any language. They help to reduce \"copying/pasting\" code multiple times, help the code look cleaner, and far easier to work with when you have to make changes.\n\n## TL;DR\n\nHere's the final code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmagic.8ball <- function(seed_value) {\n  # check to see if the argument is missing\n  # if argument is missing, the output will change every time the function is run\n  if(missing(seed_value)) {\n    x <- sample(1:10,1)\n  } else {\n    # if seed is provided, then the results are reproducible\n    set.seed(seed_value)\n    x <- sample(1:10,1)\n  }\n  \n  # store the message that has been 'selected'\n  out <- messages[x]\n  \n  # return the message to the console\n  return(out)\n}\n```\n:::\n\n\n\n\n#### Acknowledgements {.appendix}\n\n[Cover image by Markus Spiske](\"https://unsplash.com/@markusspiske?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\")",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}